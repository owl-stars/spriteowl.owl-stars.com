---
title: Documentation
---

.section.cinema
  .container
    .col-xs-12.info
      %h2.title Spriteowl product overview

.section.benefits
  .container
    .row
      .col-xs-12.col-md-10.col-md-offset-1.intro
        %h2 How you benefit from Spriteowl

        %p.introText
          <strong>Writing CSS code for a sprite image is a time-consuming job as you always have to measure x, y, width and height of all sprite elements</strong>. And if elements change or new ones are added, you have no choice but to start measuring again.
          Wouldn't it be great, if you could just do your updates and let someone else take over this annoying job? <strong>Well, lucky you, that's where Spriteowl comes in.</strong>


    .row
      .col-sm-4
        .boxinfo
          %h3.title
            What you get
          %p.content
            With Spriteowl you will not only get an optimized PNG of your Photoshop sprite file, but also a stylesheet which contains <strong>each layer's position (x/y) and dimension (width/height)!</strong>

      .col-sm-4
        .boxinfo
          %h3.title
            Preprocessors support
          %p.content
            When working with one of the preprocessors <strong>LESS, SASS/SCSS or Stylus</strong> you will get a stylesheet as well as useful mixins from the #{link_to 'Cssowl mixin library', 'http://cssowl.owl-stars.com/sprite.html', :target => '_blank'} with a many functions to easily position your sprite elements.

      .col-sm-4
        .boxinfo
          %h3.title
            Namespace support
          %p.content
            Spriteowl uses namespaces to bring sprite elements into your HTML. So by just naming your groups and layers, <strong>you no longer have to worry about position changes of the sprite elements in your original Psd file</strong>.



    .no-spriteowl
      .row
        .col-xs-12.col-md-8.col-md-offset-2.intro
          %h3 The usual workflow with sprites and CSS can drive you mad

      .row
        .col-sm-3
          .box
            .arrow
            =image_tag "content/howto/how1.png", :alt => "", :class => "teaserImg"
            %h3.title Photoshop
            %p.content Create a sprite Psd

        .col-sm-3
          .box
            .arrow
            =image_tag "content/howto/no-how2.png", :alt => "", :class => "teaserImg"
            %h3.title Export Image
            %p.content Export the sprite image


        .col-sm-3
          .box
            .arrow
            =image_tag "content/howto/no-how3-boring.png", :alt => "", :class => "teaserImg"
            %h3.title Measure
            %p.content Look up each element


        .col-sm-3
          .box
            =image_tag "content/howto/no-how4.png", :alt => "", :class => "teaserImg"
            %h3.title Code
            %p.content Write CSS code

    .yes-spriteowl
      .row
        .col-xs-12.col-md-8.col-md-offset-2.intro
          %h2
            Save time and nerves with the Spriteowl way
      .row
        .col-sm-4
          .box
            .arrow
            =image_tag "content/howto/how1.png", :alt => "", :class => "teaserImg"
            %h3.title Photoshop
            %p.content Place your elements and name your groups and layers

        .col-sm-4
          .box
            .arrow
            =image_tag "content/howto/yes-how2-magic.png", :alt => "", :class => "teaserImg"
            %h3.title Spriteowl
            %p.content Choose an export option and let the magic happen!

        .col-sm-4
          .box
            =image_tag "content/howto/yes-how3.png", :alt => "", :class => "teaserImg"
            %h3.title CSS, LESS, SASS/SCSS, Stylus + PNG
            %p.content Import the generated stylesheet + PNG file(s) into your project



.section.bgDark.settings
  .container
    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2 The Extension

        %p.introText
          This is what Spriteowl does for you: <strong>In just 3 quick'n'easy steps the extension automatically creates a stylesheet + PNG file(s) directly from Photoshop!</strong>

    .row
      .col-sm-6
        .teaserImg
          =image_tag "content/settings/spriteowl-extension.png", :alt => ""

      .col-sm-6
        %ol
          %li
            .box
              %h3
                Syntax:
              %p
                Select the output syntax. We support CSS, LESS, SASS/SCSS and Stylus.

          %li
            .box
              %h3
                Retina:
              %p
                Enabled Spriteowl will automatically generate an additional 50% downsized image and all the required media queries.

          %li
            .box
              %h3
                Trim:
              %p
                Enabled Spriteowl will trim the output PNG for you.

          %li
            .box
              %h3
                Export:
              %p
                Click and choose the location where to save the stylesheet + PNG file(s).




.section.example
  .container
    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2 A simple walktrough

        %p.introText
          Got you intrigued? <strong>Perfect, because working with Spriteowl is super easy!</strong>

    .row
      .col-md-6
        .nr
          1.
        .content
          %h3
            Photoshop
          %p
            Before exporting a sprite with Spriteowl, please <strong>place your elements</strong> and <strong>name your groups and layers</strong>.
            %br
            %br
            %strong Tip:
            %br
            You'll need at least one top level group as Spriteowl will export each of them as a separate sprite.
            Groups and layers should be named according to class names in HTML, since you will use them later in your stylesheets.
            %br
            %br

      .col-md-6
        .teaserImg
          =image_tag "content/example/psd-layers.png", :alt => ""

    .row
      .col-md-6
        .nr
          2.
        .content
          %h3
            Export
          %p
            Now it's time to export your sprite!
            %br
            %br
            Define your options, click "<strong>Export</strong>" and choose a destination folder.
            %br
            %br
            Spriteowl will export each top level group as a separate spritesheet and it's PNGs.

      .col-md-6.exampleextension
        .teaserImg
          =image_tag "content/settings/spriteowl-extension.png", :alt => ""

    .row
      .col-md-6
        .nr
          3.
        .content
          %h3
            How to use the exported files
          %p
            Just import your spritesheet into your project and if necessary override the image sources.
            %br
            %br
            %strong Here are two simple example usages:
            %br
          .codeexample
            .example1.box
              .coffee
              Example 1

            .example2.box
              .pacman
              Example 2 (hover)

            %br
            %strong Tip:
            %br
            For more useful mixins check out the #{link_to 'Cssowl mixin library', 'http://cssowl.owl-stars.com', :target => '_blank'}.
            %br
            %br

      .col-md-6
        .tabbox
          %ul.nav.nav-tabs
            %li.active.htmltab
              %a{"data-toggle" => "tab", href: "#htmlcode"} HTML
            %li
              %a{"data-toggle" => "tab", href: "#sasscode"} SASS
            %li
              %a{"data-toggle" => "tab", href: "#scsscode"} SCSS
            %li
              %a{"data-toggle" => "tab", href: "#lesscode"} LESS
            %li
              %a{"data-toggle" => "tab", href: "#styluscode"} Stylus


          .tab-content
            #htmlcode.tab-pane.active.code
              = preserve do
                -code("html") do
                  :plain

                    <div class="codeexample">

                      <div class="example1">
                        <div class="coffe"></div>
                        Example 1
                      </div>

                      <div class="example2">
                        <div class="pacman"></div>
                        Example 2 (hover)
                      </div>
                    <div/>


            #sasscode.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // override the image sources before the import
                    $example-sheet-image: url("example.png")
                    $example-sheet-image-2x: url("example@2x.png")

                    // import the example spritesheet
                    @import "example"

                    .codeexample
                      .example1 > .coffee
                        +example-coffee()
                        // or: @extend %example-coffee

                      .example2 > .pacman
                        +example-pacman-up()
                        // or: @extend %example-pacman-up

                        &:hover
                          +example-pacman-over-position()
                          // or: @extend %example-pacman-over-position


            #scsscode.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // override the image sources before the import
                    $example-sheet-image: url("example.png");
                    $example-sheet-image-2x: url("example@2x.png");

                    // import the example spritesheet
                    @import "example";

                    .codeexample {
                      .example1 > .coffee {
                        @include example-coffee();
                        // or: @extend %example-coffee;
                      }

                      .example2 > .pacman {
                        @include example-pacman-up();
                        // or: @extend %example-pacman-up;

                        &:hover {
                          @include example-pacman-over-position();
                          // or: @extend %example-pacman-over-position;
                        }
                      }
                    }


            #lesscode.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // import the example spritesheet
                    @import "example";

                    // override the image sources after the import
                    @example-sheet-image: url("example.png");
                    @example-sheet-image-2x: url("example@2x.png");

                    .codeexample {

                      .example1 > .coffee {
                        .example-coffee();
                      }

                      .example2 > .pacman {
                        .example-pacman-up();

                        &:hover {
                          .example-pacman-over-position();
                        }
                      }
                    }

            #styluscode.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // override the image sources before the import
                    $example-sheet-image: url("example.png")
                    $example-sheet-image-2x: url("example@2x.png")

                    // import the example spritesheet
                    @import "example"

                    .codeexample

                      .example1 > .coffee
                          example-coffee()
                          // or: @extend $example-coffee

                      .example2 > .pacman
                          example-pacman-up()
                          // or: @extend $example-pacman-up

                          &:hover
                            example-pacman-over-position()
                            // or: @extend $example-pacman-over-position

.section.bgDark.mixins
  .container
    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2 Spritesheet

        %p.introText
          The first part of the generated Spritesheet contains variables, mixins and extendable placeholders for the sprite itself like
          sprite width, height & image sources.

    .row
      .col-sm-12

        .tabbox

          %ul.nav.nav-tabs
            %li.active
              %a{"data-toggle" => "tab", href: "#sassvars"} SASS
            %li
              %a{"data-toggle" => "tab", href: "#scssvars"} SCSS
            %li
              %a{"data-toggle" => "tab", href: "#lessvars"} LESS
            %li
              %a{"data-toggle" => "tab", href: "#stylusvars"} Stylus

          .tab-content

            #sassvars.tab-pane.code.active
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-sheet-width: 50px !default
                    $example-sheet-height: 130px !default
                    $example-sheet-image: url("example.png") !default
                    $example-sheet-image-2x: url("example@2x.png") !default
                    $example-sheet: $example-sheet-width $example-sheet-height $example-sheet-image $example-sheet-image-2x example !default

                    // mixins & extenable placeholders
                    =example-element()
                      background-image: $example-sheet-image
                      background-repeat: no-repeat
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx)
                        background-image: $example-sheet-image-2x
                        background-size: $example-sheet-width $example-sheet-height
                    %example-element
                      +example-element()

            #scssvars.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    $example-sheet-width: 50px !default;
                    $example-sheet-height: 130px !default;
                    $example-sheet-image: url("example.png") !default;
                    $example-sheet-image-2x: url("example@2x.png") !default;
                    $example-sheet: $example-sheet-width $example-sheet-height $example-sheet-image $example-sheet-image-2x example !default;

                    // mixins & extenable placeholders
                    @mixin example-element() {
                      background-image: $example-sheet-image;
                      background-repeat: no-repeat;
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
                        background-image: $example-sheet-image-2x;
                        background-size: $example-sheet-width $example-sheet-height;
                      }
                    }
                    %example-element {
                      @include example-element();
                    }

            #lessvars.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    @example-sheet-width: 50px;
                    @example-sheet-height: 130px;
                    @example-sheet-image: url("example.png");
                    @example-sheet-image-2x: url("example@2x.png");
                    @example-sheet: @example-sheet-width @example-sheet-height @example-sheet-image @example-sheet-image-2x example;

                    // mixins & extenable placeholders
                    .example-element() {
                      background-image: @example-sheet-image;
                      background-repeat: no-repeat;
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
                        background-image: @example-sheet-image-2x;
                        background-size: @example-sheet-width @example-sheet-height;
                      }
                    }
                    .example-element {
                      .example-element();
                    }


            #stylusvars.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-sheet-width ?= 50px
                    $example-sheet-height ?= 130px
                    $example-sheet-image ?= url("example.png")
                    $example-sheet-image-2x ?= url("example@2x.png")
                    $example-sheet ?= $example-sheet-width $example-sheet-height $example-sheet-image-2x $example-sheet-image-2x example

                    // mixins & extenable placeholders
                    $example-sheet-width ?= 50px
                    $example-sheet-height ?= 130px
                    $example-sheet-image ?= url("example.png")
                    $example-sheet-image-2x ?= url("example@2x.png")
                    $example-sheet ?= $example-sheet-width $example-sheet-height $example-sheet-image-2x $example-sheet-image-2x example

                    example-element()
                      background-image: $example-sheet-image
                      background-repeat: no-repeat
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx)
                        background-image: $example-sheet-image-2x
                        background-size: $example-sheet-width $example-sheet-height
                    $example-element
                      sprite-element()


    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2 Spritesheet elements

        %p.introText
          The second part contains the variables, mixins and extendable placeholders for each sprite element.
          In addition to it's variables, each layer includes the Cssowl sprite mixins. For more details and examples check out the #{link_to 'documentation', 'http://cssowl.owl-stars.com/sprite.html', :target => '_blank'}.

    .row
      .col-sm-12

        .tabbox

          %ul.nav.nav-tabs
            %li.active
              %a{"data-toggle" => "tab", href: "#sassmixins"} SASS
            %li
              %a{"data-toggle" => "tab", href: "#scssmixins"} SCSS
            %li
              %a{"data-toggle" => "tab", href: "#lessmixins"} LESS
            %li
              %a{"data-toggle" => "tab", href: "#stylusmixins"} Stylus

          .tab-content
            #sassmixins.tab-pane.code.active
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-coffee-x: -12px !default
                    $example-coffee-y: -11px !default
                    $example-coffee-width: 30px !default
                    $example-coffee-height: 19px !default
                    $example-coffee: $example-coffee-x $example-coffee-y $example-coffee-width $example-coffee-height example-coffee !default

                    // mixins & extenable placeholders
                    =example-coffee-width()
                      width: $example-coffee-width
                    %example-coffee-width
                      +example-coffee-width()
                    =example-coffee-height()
                      height: $example-coffee-height
                    %example-coffee-height
                      +example-coffee-height()
                    =example-coffee-size()
                      +example-coffee-width()
                      +example-coffee-height()
                    %example-coffee-size
                      +example-coffee-size()
                    =example-coffee-position()
                      background-position: $example-coffee-x $example-coffee-y
                    %example-coffee-position
                      +example-coffee-position()
                    =example-coffee()
                      +example-coffee-size()
                      +example-coffee-position()
                      @extend %example-element
                    %example-coffee
                      +example-coffee()

                    // ...

            #scssmixins.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    $example-coffee-x: -12px !default;
                    $example-coffee-y: -11px !default;
                    $example-coffee-width: 30px !default;
                    $example-coffee-height: 19px !default;
                    $example-coffee: $example-coffee-x $example-coffee-y $example-coffee-width $example-coffee-height example-coffee !default;

                    // mixins & extenable placeholders
                    @mixin example-coffee-width() {
                      width: $example-coffee-width;
                    }
                    %example-coffee-width {
                      @include example-coffee-width();
                    }
                    @mixin example-coffee-height() {
                      height: $example-coffee-height;
                    }
                    %example-coffee-height {
                      @include example-coffee-height();
                    }
                    @mixin example-coffee-size() {
                      @include example-coffee-width();
                      @include example-coffee-height();
                    }
                    %example-coffee-size {
                      @include example-coffee-size();
                    }
                    @mixin example-coffee-position() {
                      background-position: $example-coffee-x $example-coffee-y;
                    }
                    %example-coffee-position {
                      @include example-coffee-position();
                    }
                    @mixin example-coffee() {
                      @include example-coffee-size();
                      @include example-coffee-position();
                      @extend %example-element;
                    }
                    %example-coffee {
                      @include example-coffee();
                    }

                    // ...

            #lessmixins.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    @example-coffee-x: -12px;
                    @example-coffee-y: -11px;
                    @example-coffee-width: 30px;
                    @example-coffee-height: 19px;
                    @example-coffee: @example-coffee-x @example-coffee-y @example-coffee-width @example-coffee-height example-coffee;

                    // mixins
                    // note: as LESS doesn't support extendable placeholders (yet),
                    // we omit these in order to prevent unneeded code inclusion
                    .example-coffee-width() {
                      width: @example-coffee-width;
                    }
                    .example-coffee-height() {
                      height: @example-coffee-height;
                    }
                    .example-coffee-size() {
                      .example-coffee-width();
                      .example-coffee-height();
                    }
                    .example-coffee-position() {
                      background-position: @example-coffee-x @example-coffee-y;
                    }
                    .example-coffee() {
                      .example-coffee-size();
                      .example-coffee-position();
                      &:extend(.example-element);
                    }
                    .less-sprite-element(example-coffee) {
                      .example-coffee-size();
                      .example-coffee-position();
                      &:extend(.example-element);
                    }

                    // ...

            #stylusmixins.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-coffee-x ?= -12px
                    $example-coffee-y ?= -11px
                    $example-coffee-width ?= 30px
                    $example-coffee-height ?= 19px
                    $example-coffee ?= $example-coffee-x $example-coffee-y $example-coffee-width $example-coffee-height example-coffee

                    // mixins & extenable placeholders
                    example-coffee-width()
                      width: $example-coffee-width
                    $example-coffee-width
                      example-coffee-width()
                    example-coffee-height()
                      height: $example-coffee-height
                    $example-coffee-height
                      example-coffee-height()
                    example-coffee-size()
                      example-coffee-width()
                      example-coffee-height()
                    $example-coffee-size
                      example-coffee-size()
                    example-coffee-position()
                      background-position: $example-coffee-x $example-coffee-y
                    $example-coffee-position
                      example-coffee-position()
                    example-coffee()
                      example-coffee-size()
                      example-coffee-position()
                      @extend $example-element
                    $example-coffee
                      example-coffee()

                    // ...
