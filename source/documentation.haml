---
title: Documentation
---

.section.cinema
  .container
    .col-xs-12.info
      %h2.title Spriteowl product overview


.section.bgDark.settings
  .container
    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2 The Extension

        %p.introText
          This is what Spriteowl does for you: <strong>In just 4 quick'n'easy steps the extension automatically creates a sprite stylesheet + PNG file(s) directly from Photoshop!</strong>

    .row
      .col-sm-6
        .teaserImg
          =image_tag "content/settings/spriteowl-extension.png", :alt => ""

      .col-sm-6
        %ol
          %li
            .box
              %h3
                Syntax:
              %p
                Select the output syntax. We support <strong>CSS, LESS, SASS/SCSS and Stylus</strong>.

          %li
            .box
              %h3
                Retina:
              %p
                Choose this option on and Spriteowl will automatically generate <strong>two PNG files</strong>. A <strong>100% sized PNG</strong> (Retina) and an additional <strong>50% downsized PNG</strong> and all the required media queries.

          %li
            .box
              %h3
                Trim:
              %p
                Choose this option on and Spriteowl will <strong>trim the output PNG</strong> for you.

          %li
            .box
              %h3
                Export:
              %p
                Click and choose the location where to <strong>save the sprite stylesheet + PNG file(s)</strong>.




.section.example
  .container
    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2 A simple walktrough

        %p.introText
          Got you intrigued? <strong>Perfect, because working with Spriteowl is super easy!</strong>

    .row
      .col-md-6
        .nr
          1.
        .content
          %h3
            Photoshop
          %p
            Before exporting a sprite with Spriteowl, please <strong>place your elements</strong> and <strong>name your groups and layers</strong>.
            %br
            %br
            %strong Tip:
            %br
            Spriteowl export <strong>each top level group as a separate sprite</strong> (sprite stylesheet + PNG).
            %br
            Groups and layers should be named according to class names in HTML, since you will use them later in your stylesheets.
            %br
            %br

      .col-md-6
        .teaserImg
          =image_tag "content/example/psd-layers.png", :alt => ""

    .row
      .col-md-6
        .nr
          2.
        .content
          %h3
            Export
          %p
            <strong>Now it's time to export your sprite!</strong>
            %br
            %br
            Select a output <strong>"Syntax"</strong>, choose <strong>"Retina"</strong> on to generate two PNG files in different sizes, decide whether you want to <strong>"Trim"</strong> the PNG or not, click <strong>"Export"</strong> and choose a destination folder.
            %br
            %br
            After the export you'll find two type of files in your destination folder: <strong>the sprite stylesheet</strong> (CSS, LESS, SASS/SCSS or Stylus) and <strong>the PNG file(s)</strong>. If you look into the sprite stylesheet you will see that Spriteowl exactly generated the classes and mixins depending on your syntax and according to the layer and group structure of your sprite Psd.
            %br
            %br 

      .col-md-6.exampleextension
        .teaserImg
          =image_tag "content/settings/spriteowl-extension.png", :alt => ""

    .row
      .col-md-6
        .nr
          3.
        .content
          %h3
            How to use the exported files
          %p
            Import your sprite stylsheet and PNG(s) into your project and place your sprite elements wherever you want.
            %br
            %br            
            <strong>We provide you mixins and extendable placeholders for the height, width and position of each element.</strong> For more information please scroll down to <strong>the generated sprite stylesheet</strong> section.
            %br
            %br
            Here are two simple examples:
            %br
            .codeexample
              .example1.box
                .coffee
                Example 1
   
              .example2.box
                .pacman
                Example 2 (hover)
          %p
            %strong Tip:
            %br
            For more useful mixins check out the #{link_to 'Cssowl mixin library', 'http://cssowl.owl-stars.com', :target => '_blank'}.
            %br
            %br
             

      .col-md-6
        .tabbox
          %ul.nav.nav-tabs
            %li.active.htmltab
              %a{"data-toggle" => "tab", href: "#htmlcode"} HTML
            %li
              %a{"data-toggle" => "tab", href: "#sasscode"} SASS
            %li
              %a{"data-toggle" => "tab", href: "#scsscode"} SCSS
            %li
              %a{"data-toggle" => "tab", href: "#lesscode"} LESS
            %li
              %a{"data-toggle" => "tab", href: "#styluscode"} Stylus

          .tab-content
            #htmlcode.tab-pane.active.code
              = preserve do
                -code("html") do
                  :plain

                    <div class="codeexample">

                      <div class="example1">
                        <div class="coffe"></div>
                        Example 1
                      </div>

                      <div class="example2">
                        <div class="pacman"></div>
                        Example 2 (hover)
                      </div>
                    <div/>


            #sasscode.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // override the image sources before the import
                    $example-sheet-image: url("example.png")
                    $example-sheet-image-2x: url("example@2x.png") 

                    // import the example spritesheet
                    @import "example"

                    .codeexample
                      .example1 > .coffee
                        +example-coffee()
                        // or: @extend %example-coffee

                      .example2 > .pacman
                        +example-pacman-up()
                        // or: @extend %example-pacman-up

                        &:hover
                          +example-pacman-over-position()
                          // or: @extend %example-pacman-over-position


            #scsscode.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // override the image sources before the import
                    $example-sheet-image: url("example.png");
                    $example-sheet-image-2x: url("example@2x.png");

                    // import the example spritesheet
                    @import "example";

                    .codeexample {
                      .example1 > .coffee {
                        @include example-coffee();
                        // or: @extend %example-coffee;
                      }

                      .example2 > .pacman {
                        @include example-pacman-up();
                        // or: @extend %example-pacman-up;

                        &:hover {
                          @include example-pacman-over-position();
                          // or: @extend %example-pacman-over-position;
                        }
                      }
                    }


            #lesscode.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // import the example spritesheet
                    @import "example";

                    // override the image sources after the import
                    @example-sheet-image: url("example.png");
                    @example-sheet-image-2x: url("example@2x.png");

                    .codeexample {

                      .example1 > .coffee {
                        .example-coffee();
                      }

                      .example2 > .pacman {
                        .example-pacman-up();

                        &:hover {
                          .example-pacman-over-position();
                        }
                      }
                    }

            #styluscode.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // override the image sources before the import
                    $example-sheet-image: url("example.png")
                    $example-sheet-image-2x: url("example@2x.png")

                    // import the example spritesheet
                    @import "example"

                    .codeexample

                      .example1 > .coffee
                          example-coffee()
                          // or: @extend $example-coffee

                      .example2 > .pacman
                          example-pacman-up()
                          // or: @extend $example-pacman-up

                          &:hover
                            example-pacman-over-position()
                            // or: @extend $example-pacman-over-position




.section.bgDark.mixins
  .container
    .row
      .col-xs-12.col-md-8.col-md-offset-2.intro
        %h2
          The generated sprite stylesheet
        %p.introText
          The generated sprite stylesheet contains two code parts, the first part is for the sprite itself and the second part for the sprite elements

    .row
      .col-sm-12.col-lg-10
        .nr
          1.
        .content
          %h3
            The sprite itself
          %p
            The first part of the generated sprite stylesheet contains variables, mixins and extendable placeholders for the sprite itself like the <strong>sprite width, height and the path to the sprite PNG files</strong>.

    .row
      .col-sm-12
        .tabbox
          %ul.nav.nav-tabs
            %li.active
              %a{"data-toggle" => "tab", href: "#sassvars"} SASS
            %li
              %a{"data-toggle" => "tab", href: "#scssvars"} SCSS
            %li
              %a{"data-toggle" => "tab", href: "#lessvars"} LESS
            %li
              %a{"data-toggle" => "tab", href: "#stylusvars"} Stylus

          .tab-content
            #sassvars.tab-pane.code.active
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-sheet-width: 50px !default
                    $example-sheet-height: 130px !default
                    $example-sheet-image: url("example.png") !default
                    $example-sheet-image-2x: url("example@2x.png") !default
                    $example-sheet: $example-sheet-width $example-sheet-height $example-sheet-image $example-sheet-image-2x example !default

                    // mixins & extenable placeholders
                    =example-element()
                      background-image: $example-sheet-image
                      background-repeat: no-repeat
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx)
                        background-image: $example-sheet-image-2x
                        background-size: $example-sheet-width $example-sheet-height
                    %example-element
                      +example-element()

            #scssvars.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    $example-sheet-width: 50px !default;
                    $example-sheet-height: 130px !default;
                    $example-sheet-image: url("example.png") !default;
                    $example-sheet-image-2x: url("example@2x.png") !default;
                    $example-sheet: $example-sheet-width $example-sheet-height $example-sheet-image $example-sheet-image-2x example !default;

                    // mixins & extenable placeholders
                    @mixin example-element() {
                      background-image: $example-sheet-image;
                      background-repeat: no-repeat;
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
                        background-image: $example-sheet-image-2x;
                        background-size: $example-sheet-width $example-sheet-height;
                      }
                    }
                    %example-element {
                      @include example-element();
                    }

            #lessvars.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    @example-sheet-width: 50px;
                    @example-sheet-height: 130px;
                    @example-sheet-image: url("example.png");
                    @example-sheet-image-2x: url("example@2x.png");
                    @example-sheet: @example-sheet-width @example-sheet-height @example-sheet-image @example-sheet-image-2x example;

                    // mixins & extenable placeholders
                    .example-element() {
                      background-image: @example-sheet-image;
                      background-repeat: no-repeat;
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx) {
                        background-image: @example-sheet-image-2x;
                        background-size: @example-sheet-width @example-sheet-height;
                      }
                    }
                    .example-element {
                      .example-element();
                    }


            #stylusvars.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-sheet-width ?= 50px
                    $example-sheet-height ?= 130px
                    $example-sheet-image ?= url("example.png")
                    $example-sheet-image-2x ?= url("example@2x.png")
                    $example-sheet ?= $example-sheet-width $example-sheet-height $example-sheet-image-2x $example-sheet-image-2x example

                    // mixins & extenable placeholders
                    $example-sheet-width ?= 50px
                    $example-sheet-height ?= 130px
                    $example-sheet-image ?= url("example.png")
                    $example-sheet-image-2x ?= url("example@2x.png")
                    $example-sheet ?= $example-sheet-width $example-sheet-height $example-sheet-image-2x $example-sheet-image-2x example

                    example-element()
                      background-image: $example-sheet-image
                      background-repeat: no-repeat
                      @media only screen and (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi), (min-resolution: 1.5dppx)
                        background-image: $example-sheet-image-2x
                        background-size: $example-sheet-width $example-sheet-height
                    $example-element
                      sprite-element()

    .row
      .col-sm-12.col-lg-10
        .nr
          2.
        .content
          %h3
            The sprite elements
          %p 
            The second part contains the variables, mixins and extendable placeholders for each sprite element. <strong>The width() and height() sets the width or height of an element, sizes() sets both the width and height and the position() sets the x and y coordinates of an element.</strong>
            For more useful mixins check out the <strong>#{link_to 'Cssowl mixin library', 'http://cssowl.owl-stars.com', :target => '_blank'}</strong>. 

    .row
      .col-sm-12
        .tabbox
          %ul.nav.nav-tabs
            %li.active
              %a{"data-toggle" => "tab", href: "#sassmixins"} SASS
            %li
              %a{"data-toggle" => "tab", href: "#scssmixins"} SCSS
            %li
              %a{"data-toggle" => "tab", href: "#lessmixins"} LESS
            %li
              %a{"data-toggle" => "tab", href: "#stylusmixins"} Stylus

          .tab-content
            #sassmixins.tab-pane.code.active
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-coffee-x: -12px !default
                    $example-coffee-y: -11px !default
                    $example-coffee-width: 30px !default
                    $example-coffee-height: 19px !default
                    $example-coffee: $example-coffee-x $example-coffee-y $example-coffee-width $example-coffee-height example-coffee !default

                    // mixins & extenable placeholders
                    =example-coffee-width()
                      width: $example-coffee-width
                    %example-coffee-width
                      +example-coffee-width()
                    =example-coffee-height()
                      height: $example-coffee-height
                    %example-coffee-height
                      +example-coffee-height()
                    =example-coffee-size()
                      +example-coffee-width()
                      +example-coffee-height()
                    %example-coffee-size
                      +example-coffee-size()
                    =example-coffee-position()
                      background-position: $example-coffee-x $example-coffee-y
                    %example-coffee-position
                      +example-coffee-position()
                    =example-coffee()
                      +example-coffee-size()
                      +example-coffee-position()
                      @extend %example-element
                    %example-coffee
                      +example-coffee()

                    // ...

            #scssmixins.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    $example-coffee-x: -12px !default;
                    $example-coffee-y: -11px !default;
                    $example-coffee-width: 30px !default;
                    $example-coffee-height: 19px !default;
                    $example-coffee: $example-coffee-x $example-coffee-y $example-coffee-width $example-coffee-height example-coffee !default;

                    // mixins & extenable placeholders
                    @mixin example-coffee-width() {
                      width: $example-coffee-width;
                    }
                    %example-coffee-width {
                      @include example-coffee-width();
                    }
                    @mixin example-coffee-height() {
                      height: $example-coffee-height;
                    }
                    %example-coffee-height {
                      @include example-coffee-height();
                    }
                    @mixin example-coffee-size() {
                      @include example-coffee-width();
                      @include example-coffee-height();
                    }
                    %example-coffee-size {
                      @include example-coffee-size();
                    }
                    @mixin example-coffee-position() {
                      background-position: $example-coffee-x $example-coffee-y;
                    }
                    %example-coffee-position {
                      @include example-coffee-position();
                    }
                    @mixin example-coffee() {
                      @include example-coffee-size();
                      @include example-coffee-position();
                      @extend %example-element;
                    }
                    %example-coffee {
                      @include example-coffee();
                    }

                    // ...

            #lessmixins.tab-pane.code
              = preserve do
                -code("scss") do
                  :plain
                    // variables
                    @example-coffee-x: -12px;
                    @example-coffee-y: -11px;
                    @example-coffee-width: 30px;
                    @example-coffee-height: 19px;
                    @example-coffee: @example-coffee-x @example-coffee-y @example-coffee-width @example-coffee-height example-coffee;

                    // mixins
                    // note: as LESS doesn't support extendable placeholders (yet),
                    // we omit these in order to prevent unneeded code inclusion
                    .example-coffee-width() {
                      width: @example-coffee-width;
                    }
                    .example-coffee-height() {
                      height: @example-coffee-height;
                    }
                    .example-coffee-size() {
                      .example-coffee-width();
                      .example-coffee-height();
                    }
                    .example-coffee-position() {
                      background-position: @example-coffee-x @example-coffee-y;
                    }
                    .example-coffee() {
                      .example-coffee-size();
                      .example-coffee-position();
                      &:extend(.example-element);
                    }
                    .less-sprite-element(example-coffee) {
                      .example-coffee-size();
                      .example-coffee-position();
                      &:extend(.example-element);
                    }

                    // ...

            #stylusmixins.tab-pane.code
              = preserve do
                -code("sass") do
                  :plain
                    // variables
                    $example-coffee-x ?= -12px
                    $example-coffee-y ?= -11px
                    $example-coffee-width ?= 30px
                    $example-coffee-height ?= 19px
                    $example-coffee ?= $example-coffee-x $example-coffee-y $example-coffee-width $example-coffee-height example-coffee

                    // mixins & extenable placeholders
                    example-coffee-width()
                      width: $example-coffee-width
                    $example-coffee-width
                      example-coffee-width()
                    example-coffee-height()
                      height: $example-coffee-height
                    $example-coffee-height
                      example-coffee-height()
                    example-coffee-size()
                      example-coffee-width()
                      example-coffee-height()
                    $example-coffee-size
                      example-coffee-size()
                    example-coffee-position()
                      background-position: $example-coffee-x $example-coffee-y
                    $example-coffee-position
                      example-coffee-position()
                    example-coffee()
                      example-coffee-size()
                      example-coffee-position()
                      @extend $example-element
                    $example-coffee
                      example-coffee()

                    // ...
