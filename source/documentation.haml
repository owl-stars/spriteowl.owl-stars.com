---
title: Documentation
---

%header.howto
  = partial "partial/head"

  #cinema
    .wrapper
      %h2.title Spriteowl explained

.section
  .wrapper.howto
    %h2 What it's all about

    %h3 The usual process of working with Sprites and Css looks like this:

    .box
      %img.teaserImg{src: "assets/img/content/how1.png"}
      %h3.title Photoshop
      %p.content Create a Sprite Psd

    .box.arrows
      %img.teaserImg{src: "assets/img/content/how3.png"}
      %h3.title Export Image
      %p.content Export the Sprite image

    .box.last
      %img.teaserImg{src: "assets/img/content/how3.png"}
      %h3.title Measure & Code
      %p.content Write Css code by looking up each element

    %p.introText
      Writing Css code for a Sprite image can be quite a time consuming job as you always need to measure or look up each element's the x, y, width and height. And if elements change you need to go through your whole code to see where it needs to be updated.
      Wouldn't it be great if you could just forget about this and let it someone else handle it? Well, lucky you, that's where the Spriteowl comes in.

    %h3 Doing it the Spriteowl way:

    .box
      %img.teaserImg{src: "assets/img/content/how1.png"}
      %h3.title Photoshop
      %p.content Place your elements and name your groups and layers

    .box.arrows
      %img.teaserImg{src: "assets/img/content/how2.png"}
      %h3.title Spriteowl
      %p.content Choose your export options and let the magic happen!

    .box.last
      %img.teaserImg{src: "assets/img/content/how3.png"}
      %h3.title Css, Less, Sass/Scss, Stylus + Png
      %p.content Import the generated stylesheet + Png files into your project

    %p.introText
      With Spriteowl you will not just get an optimized Png if you wish but it will generate a Stylesheet for you.
      Depending of the output Syntax you will have more or less benefits. If you choose basic Css you will get a Stylesheet with a few style classes that will i.e. display an element in a Html tag.
      We strongly recommend you though to work with one of the Preprocessors. When selecting Less, Sass/Scss or Stylus you will get a Stylesheet in which contains each layer's position and dimension as well as
      mixins from the #{link_to 'Cssowl\'s Sprite Package', 'http://cssowl.owl-stars.com/sprite.html', :target => '_blank'}. From then on you won't need to worry about changes in the original Psd file again.

.section.bgDark
  .wrapper.settings
    %h2 The Extension

    .teaserImg
      %img{src: "assets/img/content/spriteowl-extension.png"}

    %ul
      %li
        .big Syntax:
        Select the output syntax. We support Css, Less, Sass/Scss and Stylus.

      %li
        .big Optimize:
        Switch it on and Spriteowl will <i>trim</i> and <i>posterize</i> the output Png.

      %li
        .big Export
        Click and choose the location where to save the Stylesheet + Png.


.section
  .wrapper.example
    %h2 Walktrough

    %p.introText
      Probably the best way to explain you how to use Spriteowl is to give you a simple walkthrough. (The files can be downloaded #{link_to 'here', '#', :target => '_blank' })

    .row
      .box
        .nr
          1.
        .content
          %h3
            Photoshop
          %p
            Place your elements and name your groups and layers.
            %br
            %br
            You need at least one top level group as Spriteowl will export each top level group as a separate sprite.
            Groups and layers should be named according to class names in html since you will them later on in your Stylesheet.

      .box.teaserImg
        %img{src: "assets/img/content/example/psd-layers.png"}

    .row
      .box
        .nr
          2.
        .content
          %h3
            Export
          %p
            Now its time to export your Psd.
            %br
            %br
            Choose your "Syntax", whether you want to "Optimize" the Png or not and then click "Export" and choose a destination folder.
      .box.teaserImg
        %img{src: "assets/img/content/spriteowl-extension.png"}

    .row
      .box
        .nr
          3.
        .content
          %h3
            Exported files
          %p
            After exporting your Psd you will find two files, a Png and a Stylesheet.
            If you look into the Stylesheet you will see how Spriteowl generated the classes or mixins,
            depending on your Syntax, according the layers and groups structure of your Sprite Psd.

      .box
        .tabbox
          %ul.tabnavi
            %li
              %a{title: "Css", href: "#tab1-contents-css"} Css
            %li
              %a{title: "Less", href: "#tab1-contents-less"} Less
            %li
              %a{title: "Sass", href: "#tab1-contents-sass"} Sass
            %li
              %a{title: "Scss", href: "#tab1-contents-scss"} Scss
            %li
              %a{title: "Stylus", href: "#tab1-contents-stylus"} Stylus

          #tab1-contents-css.code
            = preserve do
              -code("css") do
                :plain

                  #icon {
                    #pacMan {
                      @x: -1px;
                      @y: 0;
                      @width: 27px;
                      @height: 30px;
                      @src: @settingsSeperator;

                      .display() {
                        #cssowl > #sprite > .display(@x, @y, @width, @height, @src);
                      }
                    }
                    #coffe {
                      @x: -2px;
                      @y: -46px;
                      @width: 30px;
                      @height: 19px;
                      @src: @settingsSeperator;

                      .display() {
                        #cssowl > #sprite > .display(@x, @y, @width, @height, @src);
                      }
                    }
                  }
                  #logo {
                    #heart {
                      @x: 0;
                      @y: -81px;
                      @width: 30px;
                      @height: 29px;
                      @src: @settingsSeperator;

                      .display() {
                        #cssowl > #sprite > .display(@x, @y, @width, @height, @src);
                      }
                    }
                  }

          #tab1-contents-less
            sersless

          #tab1-contents-sass
            sersless

          #tab1-contents-scss
            = preserve do
              -code("scss") do
                :plain
                  @settingsSeperator: url("settingsSeperator.png");

                  #icon {
                    #pacMan {
                      @x: -1px;
                      @y: 0;
                      @width: 27px;
                      @height: 30px;
                      @src: @settingsSeperator;

                      .display() {
                        #cssowl > #sprite > .display(@x, @y, @width, @height, @src);
                      }
                    }
                    #coffe {
                      @x: -2px;
                      @y: -46px;
                      @width: 30px;
                      @height: 19px;
                      @src: @settingsSeperator;

                      .display() {
                        #cssowl > #sprite > .display(@x, @y, @width, @height, @src);
                      }
                    }
                  }
                  #logo {
                    #heart {
                      @x: 0;
                      @y: -81px;
                      @width: 30px;
                      @height: 29px;
                      @src: @settingsSeperator;

                      .display() {
                        #cssowl > #sprite > .display(@x, @y, @width, @height, @src);
                      }
                    }
                  }

          #tab1-contents-stylus
            serssass



    .row
      .box
        .nr
          4.
        .content
          %h3
            Examples how to use it
          %p
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, set eiusmod tempor incidunt et labore et dolore magna aliquam.
      .box.code
        %pre.prettyprint.lang-css
          = preserve do
            :escaped
              <div id="coffe">Kaffe</div>



